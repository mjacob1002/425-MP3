// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: proto/filesystem.proto

package filesystem

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileSystemClient is the client API for FileSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSystemClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (FileSystem_GetClient, error)
	Put(ctx context.Context, opts ...grpc.CallOption) (FileSystem_PutClient, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FileRange(ctx context.Context, in *FileRangeRequest, opts ...grpc.CallOption) (*FileRangeResponse, error)
	InvokeRead(ctx context.Context, in *InvokeReadRequest, opts ...grpc.CallOption) (*InvokeReadResponse, error)
}

type fileSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSystemClient(cc grpc.ClientConnInterface) FileSystemClient {
	return &fileSystemClient{cc}
}

func (c *fileSystemClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (FileSystem_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileSystem_ServiceDesc.Streams[0], "/FileSystem/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSystemGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileSystem_GetClient interface {
	Recv() (*GetResponse, error)
	grpc.ClientStream
}

type fileSystemGetClient struct {
	grpc.ClientStream
}

func (x *fileSystemGetClient) Recv() (*GetResponse, error) {
	m := new(GetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileSystemClient) Put(ctx context.Context, opts ...grpc.CallOption) (FileSystem_PutClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileSystem_ServiceDesc.Streams[1], "/FileSystem/Put", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSystemPutClient{stream}
	return x, nil
}

type FileSystem_PutClient interface {
	Send(*PutRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type fileSystemPutClient struct {
	grpc.ClientStream
}

func (x *fileSystemPutClient) Send(m *PutRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileSystemPutClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileSystemClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/FileSystem/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) FileRange(ctx context.Context, in *FileRangeRequest, opts ...grpc.CallOption) (*FileRangeResponse, error) {
	out := new(FileRangeResponse)
	err := c.cc.Invoke(ctx, "/FileSystem/FileRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) InvokeRead(ctx context.Context, in *InvokeReadRequest, opts ...grpc.CallOption) (*InvokeReadResponse, error) {
	out := new(InvokeReadResponse)
	err := c.cc.Invoke(ctx, "/FileSystem/InvokeRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileSystemServer is the server API for FileSystem service.
// All implementations must embed UnimplementedFileSystemServer
// for forward compatibility
type FileSystemServer interface {
	Get(*GetRequest, FileSystem_GetServer) error
	Put(FileSystem_PutServer) error
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	FileRange(context.Context, *FileRangeRequest) (*FileRangeResponse, error)
	InvokeRead(context.Context, *InvokeReadRequest) (*InvokeReadResponse, error)
	mustEmbedUnimplementedFileSystemServer()
}

// UnimplementedFileSystemServer must be embedded to have forward compatible implementations.
type UnimplementedFileSystemServer struct {
}

func (UnimplementedFileSystemServer) Get(*GetRequest, FileSystem_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFileSystemServer) Put(FileSystem_PutServer) error {
	return status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedFileSystemServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFileSystemServer) FileRange(context.Context, *FileRangeRequest) (*FileRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileRange not implemented")
}
func (UnimplementedFileSystemServer) InvokeRead(context.Context, *InvokeReadRequest) (*InvokeReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeRead not implemented")
}
func (UnimplementedFileSystemServer) mustEmbedUnimplementedFileSystemServer() {}

// UnsafeFileSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSystemServer will
// result in compilation errors.
type UnsafeFileSystemServer interface {
	mustEmbedUnimplementedFileSystemServer()
}

func RegisterFileSystemServer(s grpc.ServiceRegistrar, srv FileSystemServer) {
	s.RegisterService(&FileSystem_ServiceDesc, srv)
}

func _FileSystem_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileSystemServer).Get(m, &fileSystemGetServer{stream})
}

type FileSystem_GetServer interface {
	Send(*GetResponse) error
	grpc.ServerStream
}

type fileSystemGetServer struct {
	grpc.ServerStream
}

func (x *fileSystemGetServer) Send(m *GetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FileSystem_Put_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSystemServer).Put(&fileSystemPutServer{stream})
}

type FileSystem_PutServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*PutRequest, error)
	grpc.ServerStream
}

type fileSystemPutServer struct {
	grpc.ServerStream
}

func (x *fileSystemPutServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileSystemPutServer) Recv() (*PutRequest, error) {
	m := new(PutRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileSystem_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileSystem/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_FileRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).FileRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileSystem/FileRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).FileRange(ctx, req.(*FileRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_InvokeRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).InvokeRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileSystem/InvokeRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).InvokeRead(ctx, req.(*InvokeReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileSystem_ServiceDesc is the grpc.ServiceDesc for FileSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileSystem",
	HandlerType: (*FileSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _FileSystem_Delete_Handler,
		},
		{
			MethodName: "FileRange",
			Handler:    _FileSystem_FileRange_Handler,
		},
		{
			MethodName: "InvokeRead",
			Handler:    _FileSystem_InvokeRead_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _FileSystem_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Put",
			Handler:       _FileSystem_Put_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/filesystem.proto",
}
